}
f <- function(x){
g <- function(y){
y+z
}
z <- -4
x+g(x)
}
z <- 10
f(3)
f <- function(x){
g <- function (y){
y+z
}
z <- -4
x+g(x)
}
z <- 10
f(3)
f <- function(x){
g <- function (y){
y+z
}
z <- 4
x+g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x<3){
NA
}else{
10
}
y
h <- function(x, y=NULL, d=3L){
z <- cbind(x,d)
if(!is.null(y))
z <- z+y
else
z <- z+f
g <- x+y/z
if(d==3L)
return(g)
g <- g+10
g
}
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
C(1, 2, 3, 4)+c(0, 10)
C(1, 2, 3, 4) + c(0, 10)
f1 <- c(1, 2, 3, 4)
info()
C(1, 2, 3, 4) + c(0, 10)
bye()
library(s
library(swirl)
swirl()
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
play()
setwd("C:/Users/Lisa/Desktop")
nxt()
play()
old.dir <- getwd()
nxt()
dir.create()
dir.create(testdir)
testdir <- dir.create(old.dir)
dir.create(testdir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
fil.create("mytest.R")
file.create("mytest.R")
ls()
list.files("testdir")
list.files(testdir)
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1,20)
seq(0, 10, by=.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse="")
paste(my_char, collapse=" ")
my_name <- c(my_char, "datakatsudon")
my_name
paste(my_name, " ")
paste(my_name, "")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("x", "Y", "Z"), sep="")
paste(1:3, c("x", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorn(1000)
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na==TRUE)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical("vect", "vect2")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "training", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10 <= 10
5!=7
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && C(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit(boring_function.R)
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submmit()
submit()
telegram("hi")
submit()
mad_libs(here, pink, bannanna)
mad_libs(adjective = "", place = "", noun = "")
submit()
submit()
"'I' %p% 'love' %p% 'R!'"
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_colors, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plant)
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, n=10)
tail(plants, n=15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4,)
sample(1:6, 4)
sample(1:20, 10)
LLETTERS
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
match_call('rbinom(1, size = 100, prob = 0.7)')
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(filps2)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(5, mean=10)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time(t4) > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
cars
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
bye()
install_from_swirl("Getting and Cleaning Data")
library(mtcars)
mtcars
?mtcars
auto <- subset(mtcars, am==0)
auto
manual
manual <- subset(mtcars, am==1)
manual <- subset(mtcars, am==1)
manual
nrow(auto)
nrow(manual)
barplot(auto)
barplot(auto$mpg)
par(mfrow=c(2, 1))
barplot(auto$mpg, ylim=c(0, 30))
barplot(manual$mpg, ylim=c(0, 30))
par(mfrow=c(1, 2))
barplot(auto$mpg, ylim=c(0, 30))
barplot(manual$mpg, ylim=c(0, 30))
par(mfrow=c(1, 2))
barplot(auto$mpg, main="Miles Per Gallon on Automatic Transmission", xlab="Models", ylab="Miles Per Gallon", ylim=c(0, 30))
barplot(manual$mpg, main="Miles Per Gallon on Manual Transmission", xlab= "Models", ylab= "Miles Per Gallon", ylim=c(0, 35))
par(mfrow=c(1, 2))
barplot(auto$mpg, main="Miles Per Gallon on Automatic Transmission", xlab="Models", ylab="Miles Per Gallon", ylim=c(0, 35))
barplot(manual$mpg, main="Miles Per Gallon on Manual Transmission", xlab= "Models", ylab= "Miles Per Gallon", ylim=c(0, 35))
meanauto <- colMeans(auto$mpg)
meanmanual <- colMeans(manual$mpg)
meanauto <- colMeans(auto)
meanmanual <- colMeans(manual)
meanauto
meanmanual
meanauto <- mean(auto$mpg)
meanmanual <- mean(manual$mpg)
meanauto
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1-(3/36)
deck
52
4/52
0
16/52
12/52
1/6
2/51
.8*1.6
.8*1.6/2
.64
mmypdf
mypdf
mypdf(0, 1.6)
mypdf(c(0, 1.6))
integrate(mypdf, 0, 1.6)
(x^2)/8
sqrt(2)
99.7*.001
.997*.001
(1-.997)*(1-.001)
(1-.98.5)*(1-.001)
(1-.985)*(1-.001)
(.997*.001)/((1-.985)*(1-.001))
(.997*.001)/((.997*.001+.015*.999))
bye()
exit()
summary(auto$mpg)
summary(manual$mpg)
boxplot(sauto)
sauto <- summary(auto$mpg)
smanual <- summary(manual$mpg)
boxplot(sauto)
boxplot(~sauto, main="Miles Per Gallon on Automatic Transmission", )
class(sauto)
scomb <- rbind(sauto, smanual)
scomb
boxplot(scomb, main="Miles Per Gallon on Automatic Transmission", )
sauto <- summary(auto$mpg)
tauto <- t(sauto)
smanual <- summary(manual$mpg)
tmanual <- t(smanual)
scomb <- rbind(tauto, tmanual)
scomb
tauto
sauto
sauto <- summary(auto$mpg)
smanual <- summary(manual$mpg)
scomb <- rbind(sauto, smanual)
tcomb <- t(scomb)
tcomb
boxplot(tcomb, main="Miles Per Gallon on Automatic Transmission", )
Automatic_Transmissions <- summary(auto$mpg)
Manual_Transmissions <- summary(manual$mpg)
scomb <- rbind(Automatic_Transmissions, Manual_Transmissions)
tcomb <- t(scomb)
boxplot(tcomb, main="Miles Per Gallon on Automatic Transmission", x)
boxplot(tcomb, main="Miles Per Gallon on Automatic Transmission")
boxplot(tcomb, main="Miles Per Gallon Boxplot", xlab="Transmission Type", ylab="Miles Per Gallon", ylim=c(0, 35))
boxplot(tcomb, main="Miles Per Gallon Boxplot", xlab="Transmission Type", ylab="Miles Per Gallon", ylim=c(10, 35))
meanauto <- mean(auto$mpg)
meanmanual <- mean(manual$mpg)
difference <- abs(meanauto-meanmanual)
difference
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
setwd("~/Coursera_Projects/Developing Data Products")
author("Course_project")
